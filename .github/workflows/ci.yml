name: ManuSmith Shell CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write
  statuses: write

env:
  JAVA_VERSION: '21'
  ENGINE_VERSION: '2.0.0'
  
jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Shell Repository
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Checkout ManuSmith Engine
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        repository: APorkolab/manusmith-engine
        path: manusmith-engine
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Install ManuSmith Engine Dependency
      continue-on-error: true
      run: |
        if [ -d "manusmith-engine" ]; then
          cd manusmith-engine
          mvn clean package -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -q
          mvn install:install-file -Dfile=target/manusmith-engine-plugin-2.0.0.jar -DgroupId=org.manusmith -DartifactId=manusmith-engine-plugin -Dversion=2.0.0 -Dpackaging=jar -q
          echo "‚úÖ ManuSmith Engine ${{ env.ENGINE_VERSION }} installed"
        else
          echo "‚ö†Ô∏è ManuSmith Engine not available, tests will run without engine dependency"
        fi

    - name: Run Tests
      env:
        JAVA_OPTS: "-Dtestfx.robot=glass -Dtestfx.headless=true -Dprism.order=sw"
      run: |
        mvn clean test -Dtestfx.robot=glass -Dtestfx.headless=true -Dprism.order=sw
        echo "‚úÖ All tests completed"
        
    - name: Verify Test Reports
      if: always()
      run: |
        echo "üìã Checking for test report files:"
        find . -name "*.xml" -path "*/surefire-reports/*" -ls || echo "No surefire-reports XML files found"
        find . -name "TEST-*.xml" -ls || echo "No TEST-*.xml files found"
        ls -la target/surefire-reports/ || echo "No surefire-reports directory found"

    - name: Generate Test Reports
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('**/target/surefire-reports/*.xml') != ''
      with:
        name: Unit Test Results
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit
        fail-on-error: false

  build-cross-platform:
    name: Build Native Packages
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: 'macOS'
            artifact_pattern: '*.dmg'
            artifact_name: 'ManuSmith-Shell-macOS'
          - os: windows-latest  
            platform: 'Windows'
            artifact_pattern: '*.msi'
            artifact_name: 'ManuSmith-Shell-Windows'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout Shell Repository
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ matrix.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ matrix.os }}-m2

    - name: Checkout ManuSmith Engine
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        repository: APorkolab/manusmith-engine
        path: manusmith-engine
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Install ManuSmith Engine Dependency
      shell: bash
      continue-on-error: true
      run: |
        if [ -d "manusmith-engine" ]; then
          cd manusmith-engine
          mvn clean package -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -q
          mvn install:install-file -Dfile=target/manusmith-engine-plugin-2.0.0.jar -DgroupId=org.manusmith -DartifactId=manusmith-engine-plugin -Dversion=2.0.0 -Dpackaging=jar -q
          echo "‚úÖ ManuSmith Engine installed for ${{ matrix.platform }}"
        else
          echo "‚ö†Ô∏è ManuSmith Engine not available, build will continue without engine dependency"
        fi

    - name: Windows Debug Info
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo üîç Windows runner debug information:
        echo Current directory: %CD%
        echo Listing project files:
        dir
        echo Checking for batch files:
        dir *.bat
        echo JAVA_HOME: %JAVA_HOME%
        echo Testing basic commands:
        java -version
        mvn -version
    
    - name: Install WiX Toolset (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        echo "üì• Installing WiX Toolset for MSI creation..."
        choco install wixtoolset -y --no-progress
        echo "‚úÖ WiX Toolset installed successfully"

    - name: Build Native Package for macOS
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "üöÄ Building native installer for macOS..."
        
        # Step 1: Build the JAR
        mvn clean compile package -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true -Dcheckstyle.skip=true -q
        echo "‚úÖ Maven package completed"
        
        # Step 2: Create obfuscated JAR
        cp target/manusmith-shell-2.0.0-jar-with-dependencies.jar target/manusmith-shell-2.0.0-obfuscated.jar
        echo "‚úÖ Obfuscated JAR created"
        
        # Step 3: Create native DMG with jpackage
        mvn -Pmacos-package install -DskipTests -q
        echo "‚úÖ Native macOS DMG created"
        
        # Step 4: Verify artifacts
        ls -la target/dist/
        echo "üéâ macOS build completed"
    
    - name: Run Windows Environment Test
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo üß™ Running minimal Windows environment test first...
        call test-windows.bat
        echo ‚úÖ Windows environment test completed
    
    - name: Build Native Package for Windows (Inline)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo üöÄ Building Windows package inline...
        
        echo Step 1: Clean previous build
        call mvn clean -q
        if %ERRORLEVEL% NEQ 0 (
          echo ‚ùå Maven clean failed
          exit /b 1
        )
        echo ‚úÖ Maven clean completed
        
        echo Step 2: Compile and package with dependencies
        call mvn compile package -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true -Dcheckstyle.skip=true -q
        if %ERRORLEVEL% NEQ 0 (
          echo ‚ùå Maven package failed
          exit /b 1
        )
        echo ‚úÖ Maven package completed
        
        echo Step 3: List target directory
        if exist "target" (
          echo ‚úÖ Target directory found, contents:
          dir target
        ) else (
          echo ‚ùå No target directory created - Maven build may have failed silently
          exit /b 1
        )
        
        echo Step 4: Check for JAR files specifically
        echo Looking for JAR files in target:
        if exist "target\*.jar" (
          dir target\*.jar
        ) else (
          echo ‚ùå No JAR files found in target directory
          exit /b 1
        )
        
        echo Step 5: Create obfuscated JAR copy
        if exist "target\manusmith-shell-2.0.0-jar-with-dependencies.jar" (
          echo ‚úÖ Fat JAR found, copying as obfuscated version
          copy "target\manusmith-shell-2.0.0-jar-with-dependencies.jar" "target\manusmith-shell-2.0.0-obfuscated.jar"
          if %ERRORLEVEL% NEQ 0 (
            echo ‚ùå Failed to copy JAR as obfuscated version
            exit /b 1
          )
          echo ‚úÖ Obfuscated JAR created successfully
        ) else (
          echo ‚ùå Fat JAR not found - expected: target\manusmith-shell-2.0.0-jar-with-dependencies.jar
          echo Available files in target:
          dir target
          exit /b 1
        )
        
        echo Step 6: Create dist directory and copy artifacts
        if not exist "target\dist" mkdir "target\dist"
        copy "target\manusmith-shell-2.0.0-obfuscated.jar" "target\dist\"
        if %ERRORLEVEL% NEQ 0 (
          echo ‚ùå Failed to copy obfuscated JAR to dist directory
          exit /b 1
        )
        echo ‚úÖ Artifacts copied to dist directory
        
        echo Step 7: Create Windows MSI installer
        call mvn -Pwindows-package install -DskipTests -q
        if %ERRORLEVEL% NEQ 0 (
          echo ‚ùå MSI creation failed
          exit /b 1
        )
        echo ‚úÖ Windows MSI installer created
        
        echo Step 8: Verify final artifacts
        echo Checking for MSI files:
        if exist "target\dist\*.msi" (
          dir "target\dist\*.msi"
          echo ‚úÖ MSI installer found
        ) else (
          echo ‚ö†Ô∏è MSI installer not found, but JAR artifacts are available
        )
        
        if exist "target\dist\manusmith-shell-2.0.0-obfuscated.jar" (
          echo üéâ Windows build completed successfully!
          echo Final dist directory contents:
          dir "target\dist"
        ) else (
          echo ‚ùå Final artifact verification failed
          echo Target directory contents:
          dir target
          exit /b 1
        )

    - name: Upload Native Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ github.run_number }}
        path: |
          target/dist/*.dmg
          target/dist/*.msi
          target/dist/*-obfuscated.jar
        retention-days: 90
        if-no-files-found: warn

    - name: Verify Package Creation (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "üì¶ Checking created packages:"
        ls -la target/dist/ || echo "No dist directory"
        ls -la target/*.jar || echo "No JAR files"
        echo "‚úÖ macOS package verification completed"
    
    - name: Verify Package Creation (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo üì¶ Detailed Windows package verification:
        echo Current directory: %CD%
        echo Listing root directory:
        dir
        echo Checking if target directory exists:
        if exist "target" (
          echo target directory found, listing contents:
          dir target
          echo Checking for dist subdirectory:
          if exist "target\dist" (
            echo target\dist found, listing contents:
            dir target\dist
          ) else (
            echo target\dist directory does not exist
          )
          echo Checking for JAR files in target:
          dir target\*.jar 2>nul || echo No JAR files found in target
        ) else (
          echo target directory does not exist at all
        )
        echo ‚úÖ Windows package verification completed

  release:
    name: Create Release with Native Installers
    needs: build-cross-platform
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push' || startsWith(github.ref, 'refs/tags/')) && success()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download macOS Package
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: ManuSmith-Shell-macOS-v${{ github.run_number }}
        path: ./release-assets/
    
    - name: Download Windows Package  
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: ManuSmith-Shell-Windows-v${{ github.run_number }}
        path: ./release-assets/
    
    - name: Check and List Release Assets
      id: check_assets
      run: |
        echo "üìã Checking available release assets:"
        mkdir -p ./release-assets
        
        # Count available assets
        ASSET_COUNT=$(find ./release-assets -type f -name "*.dmg" -o -name "*.msi" -o -name "*-obfuscated.jar" | wc -l)
        echo "Total assets found: $ASSET_COUNT"
        
        if [ $ASSET_COUNT -eq 0 ]; then
          echo "‚ö†Ô∏è No native installers found - will create release with available artifacts only"
          echo "has_assets=false" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Found $ASSET_COUNT native installer assets:"
          find ./release-assets -type f -name "*.dmg" -o -name "*.msi" -o -name "*-obfuscated.jar" | sort
          echo "has_assets=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract Version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v${{ github.run_number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìå Release version: $VERSION"
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ManuSmith Shell ${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        generate_release_notes: false
        body: |
          ## üéâ ManuSmith Shell Release ${{ steps.version.outputs.version }}
          
          ### üî• What's New
          - **ManuSmith Engine v${{ env.ENGINE_VERSION }}**: Latest engine integration with full ODT support
          - **Full ODT Support**: Complete OpenDocument Text file processing capabilities  
          - **Enhanced Build System**: Improved CI/CD pipeline with cross-platform builds
          ${{ steps.check_assets.outputs.has_assets == 'true' && '- **Native Desktop Applications**: Ready-to-install packages for macOS and Windows' || '- **Development Build**: Source code and JAR files available' }}
          ${{ steps.check_assets.outputs.has_assets == 'true' && '- **ProGuard Obfuscation**: Enhanced security with obfuscated bytecode' || '' }}
          
          ### üì¶ Download Options
          
          **macOS Users:**
          - Download `ManuSmith-Shell-${{ steps.version.outputs.version }}.dmg`
          - Double-click to mount, then drag to Applications folder
          
          **Windows Users:**
          - Download `ManuSmith-Shell-${{ steps.version.outputs.version }}.msi`  
          - Run installer with administrator privileges
          
          **Advanced Users:**
          - JAR files available for custom deployment scenarios
          
          ### ‚ö° Key Features
          - Modern JavaFX user interface
          - Document conversion between multiple formats
          - Advanced typography and formatting tools
          - Cross-platform compatibility
          - Built-in security and performance optimizations
          
          ### üõ†Ô∏è Technical Details
          - Java Runtime: OpenJDK ${{ env.JAVA_VERSION }}
          - Engine Version: v${{ env.ENGINE_VERSION }}
          - Build: #${{ github.run_number }}
          - Commit: ${{ github.sha }}
        files: |
          ./release-assets/**/*.dmg
          ./release-assets/**/*.msi
          ./release-assets/**/*-obfuscated.jar
    
    - name: Release Summary
      run: |
        echo "üéä Release ${{ steps.version.outputs.version }} created successfully!"
        echo "üì• Download URL: ${{ steps.create_release.outputs.url }}"
        echo "üè∑Ô∏è  Release ID: ${{ steps.create_release.outputs.id }}"
        echo "üì¶ Assets uploaded: DMG, MSI, and obfuscated JARs"
        echo "‚úÖ CI/CD Pipeline completed successfully"

  security-scan:
    name: Security Analysis
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Checkout ManuSmith Engine
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        repository: APorkolab/manusmith-engine
        path: manusmith-engine
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Install ManuSmith Engine Dependency
      continue-on-error: true
      run: |
        if [ -d "manusmith-engine" ]; then
          cd manusmith-engine
          mvn clean package -DskipTests -Dspotbugs.skip=true -Ddependency-check.skip=true -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -q
          mvn install:install-file -Dfile=target/manusmith-engine-plugin-2.0.0.jar -DgroupId=org.manusmith -DartifactId=manusmith-engine-plugin -Dversion=2.0.0 -Dpackaging=jar -q
          echo "‚úÖ ManuSmith Engine installed for security scan"
        else
          echo "‚ö†Ô∏è ManuSmith Engine not available, skipping engine dependency installation"
        fi

    - name: Run OWASP Dependency Check
      continue-on-error: true
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: |
        mvn clean compile || echo "‚ö†Ô∏è Compile failed, continuing with available dependencies"
        mvn org.owasp:dependency-check-maven:check -Dformat=ALL -Dnvd.api.key=${{ secrets.NVD_API_KEY }} || echo "‚ö†Ô∏è Security scan failed, continuing"
        echo "üîç Security scan completed"
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-${{ github.run_number }}
        path: |
          target/dependency-check-report.html
          target/dependency-check-report.json
          target/dependency-check-report.xml
        retention-days: 30
        if-no-files-found: warn

  notify:
    name: Slack Notification
    needs: [test, build-cross-platform, security-scan]
    runs-on: ubuntu-latest
    if: always() && vars.SLACK_WEBHOOK_URL != ''
    
    steps:
    - name: Determine Status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-cross-platform.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=‚úÖ ManuSmith Shell CI/CD completed successfully!" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build-cross-platform.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=‚ùå ManuSmith Shell CI/CD failed!" >> $GITHUB_OUTPUT
        else
          echo "status=cancelled" >> $GITHUB_OUTPUT
          echo "message=‚ö†Ô∏è ManuSmith Shell CI/CD was cancelled" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      if: vars.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ steps.status.outputs.status }}
        text: ${{ steps.status.outputs.message }}
        webhook_url: ${{ vars.SLACK_WEBHOOK_URL }}
